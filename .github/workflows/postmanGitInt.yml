name: Import Postman Collection 

on:
  push:
    branches:
      - main

jobs:
  import_collection:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Import Collection to Postman (Create New)
      env:
        POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        COLLECTION_FILE: API/DocuSeal.json

      run: |
        WRAPPED_FILE=$(mktemp)
        jq -n --argjson collection "$(cat "$COLLECTION_FILE")" '{collection: $collection}' > "$WRAPPED_FILE"

        echo "Sending collection to Postman..."
        response=$(curl --location --request POST "https://api.getpostman.com/collections" \
          --header "X-Api-Key: $POSTMAN_API_KEY" \
          --header "Content-Type: application/json" \
          --data @"$WRAPPED_FILE")

        echo "Response: $response"
        COLLECTION_UID=$(echo "$response" | jq -r '.collection.uid')

        if [ -z "$COLLECTION_UID" ] || [ "$COLLECTION_UID" == "null" ]; then
          echo "❌ Failed to import collection. Full response:"
          echo "$response"
          exit 1
        fi

        echo "✅ Successfully imported collection. UID: $COLLECTION_UID"
        echo "COLLECTION_UID=$COLLECTION_UID" >> $GITHUB_ENV

    - name: Fetch Collection JSON from Postman
      env:
        POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        COLLECTION_UID: ${{ env.COLLECTION_UID }}
      run: |
        echo "Fetching collection JSON for $COLLECTION_UID"
        curl --silent --location --request GET "https://api.getpostman.com/collections/$COLLECTION_UID" \
          --header "X-Api-Key: $POSTMAN_API_KEY" \
          --header "Content-Type: application/json" \
          | tee postman-collection-$COLLECTION_UID.json | jq .

    - name: Patch Security Scheme and Update OpenAPI JSON (IBM APIC)
      run: |
        echo "Patching collection JSON with security schemes and IBM APIC config..."

        cat postman-collection-$COLLECTION_UID.json | jq '. += {
          "components": {
            "securitySchemes": {
              "SecSchemeStub": {
                "type": "apiKey",
                "x-key-type": "client_id",
                "name": "X-IBM-Client-Id",
                "in": "header"
              }
            }
          },
          "security": [{"SecSchemeStub": []}]
        }' > apic-friendly-secure.json

        echo "Extracting server URL..."
        URL=$(jq -r '.servers[0].url' apic-friendly-secure.json)

        echo "Injecting IBM APIC configuration with target-url: $URL"
        jq --arg url "$URL" '. += {
          "x-ibm-configuration": {
            "assembly": {
              "execute": [{
                "invoke": {
                  "version": "2.0.0",
                  "title": "invoke",
                  "target-url": "$(target-url)$(request.path)"
                }
              }]
            },
            "properties": {
              "target-url": {
                "value": $url,
                "description": "The URL of the target service",
                "encoded": false
              }
            }
          }
        }' apic-friendly-secure.json > apic-friendly-secure-import.json

        echo "✅ Patched OpenAPI file ready: apic-friendly-secure-import.json"
        echo "📄 Printing apic-friendly-secure-import.json content:"
        cat apic-friendly-secure-import.json | jq .

    - name: Commit patched OpenAPI file to repo
      run: |
        git config --global user.name "laxman"
        git config --global user.email "lvadapalli@gmail.comcom"

        # Move the file into API/ directory (adjust if needed)
        mv apic-friendly-secure-import.json API/apic-friendly-secure-import.json

        git pull origin main
        git add API/apic-friendly-secure-import.json

        if ! git diff --cached --quiet; then
          git commit -m "Add/Update patched OpenAPI file from GitHub Actions"
          git push origin main
        else
          echo "No changes to commit."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
